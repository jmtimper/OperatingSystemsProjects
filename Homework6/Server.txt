import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.Random;
import java.util.ArrayList;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.security.PublicKey;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.security.GeneralSecurityException;
import javax.xml.bind.DatatypeConverter;

/** A server that keeps up with a public key for every user, along
    with a short history of posted messages. */
public class Server {
  /** Port number used by the server */
  public static final int PORT_NUMBER = 26104;

  /** Record for an individual user. */
  private static class UserRec {
    // Name of this user.
    String name;

    // This user's public key.
    PublicKey publicKey;
  }

  /** List of all the user records, created at start-up */
  private ArrayList< UserRec > userList = new ArrayList< UserRec >();

  /** Read the user account information for all users. */
  private void readUsers() throws Exception {
    Scanner input = new Scanner( new File( "passwrd.txt" ) );

    int userCount = input.nextInt();
    for ( int k = 0; k < userCount; k++ ) {
      // Create a record for the next user.
      UserRec rec = new UserRec();
      rec.name = input.next();
      
      // Get the key as a string of hex digits and turn it into a byte array.
      String hexKey = input.nextLine().trim();
      byte[] rawKey = DatatypeConverter.parseHexBinary( hexKey );
    
      // Make a key specification based on this key.
      X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec( rawKey );

      // Make an RSA key based on this specification
      KeyFactory keyFactory = KeyFactory.getInstance( "RSA" );
      rec.publicKey = keyFactory.generatePublic( pubKeySpec );

      // Add this user to the list of all users.
      userList.add( rec );
    }
  }

  /** Utility function to read a length then a byte array from the
      given stream.  TCP doesn't respect message boundaraies, but this
      is essientially a technique for marking the start and end of
      each message in the byte stream.  This function is public, so it
      can also be used by the client. */
  public static byte[] getMessage( DataInputStream input ) throws IOException {
    int len = input.readInt();
    byte[] msg = new byte [ len ];
    input.readFully( msg );
    return msg;
  }

  /** Function analogous to the previous one, for sending messages. */
  public static void putMessage( DataOutputStream output, byte[] msg ) throws IOException {
    // Write the length of the given message, followed by its contents.
    output.writeInt( msg.length );
    output.write( msg, 0, msg.length );
    output.flush();
  }

  /** Function to handle interaction with a client.  Really, this should
      be run in a thread. */
  public void handleClient( Socket sock ) {
    try {
      // Get formatted input/output streams for this thread.  These can read and write
      // strings, arrays of bytes, ints, lots of things.
      DataOutputStream output = new DataOutputStream( sock.getOutputStream() );
      DataInputStream input = new DataInputStream( sock.getInputStream() );
      
      // Get the username.
      String username = input.readUTF();

      // Make a random sequence of bytes to use as a challenge string.  I don't think
      // this source of randoness is cryptographically strong, so this is probably
      // nto a great way to do this.
      Random rand = new Random();
      byte[] challenge = new byte [ 16 ];
      rand.nextBytes( challenge );

      // Make a session key for communiating over AES.  We use it later, if the
      // client successfully authenticates.
      byte[] sessionKey = new byte [ 16 ];
      rand.nextBytes( sessionKey );

      // Find this user.  We don't need to synchronize here, since the set of users never
      // changes.
      UserRec rec = null;
      for ( int i = 0; rec == null && i < userList.size(); i++ )
        if ( userList.get( i ).name.equals( username ) )
          rec = userList.get( i );

      // Did we find a record for this user?
      if ( rec != null ) {
        // Make sure the client encrypted the challenge properly.
        Cipher RSADecrypter = Cipher.getInstance( "RSA" );
        RSADecrypter.init( Cipher.DECRYPT_MODE, rec.publicKey );
        
        Cipher RSAEncrypter = Cipher.getInstance( "RSA" );
        RSAEncrypter.init( Cipher.ENCRYPT_MODE, rec.publicKey );
        
        // Send the client the challenge.
        putMessage( output, challenge );

        // Get back the client's encrypted challenge.
        byte[] buffer = new byte[64];
        int len = input.read( buffer );

        // Make sure the client properly encrypted the challenge.
        byte[] test = RSADecrypter.doFinal( buffer );
        if(!Arrays.equals(test, challenge)){
          System.err.println( "Challenges are not equal" );
          System.exit( 1 );
        }
        //System.out.println( "Server Decrypt " + DatatypeConverter.printHexBinary( buffer ) );

        // Send the client the encrypted session key.
        byte[] sesKey = rec.publicKey.getEncoded();
        output.write(sesKey, 0, sesKey.length);
        output.flush();

        // Make AES encrypter and decrypter ciphers using the session key.
        Cipher AESEncrypter = Cipher.getInstance( "AES/ECB/PKCS5PADDING" );
        AESEncrypter.init( Cipher.ENCRYPT_MODE, rec.publicKey );

        Cipher AESDecrypter = Cipher.getInstance( "AES/ECB/PKCS5PADDING" );
        AESDecrypter.init( Cipher.DECRYPT_MODE, rec.publicKey );

        // Get the first client command.
        String request = new String( getMessage( input ) );

        // Keep processing commands until the client chooses to quit.
        while ( ! request.equals( "quit" ) ) {
          StringBuilder reply = new StringBuilder();

          // For now, just send back a copy of the request as the reply.
          reply.append( request + "\n" );

          // Send the reply back to our client.
          putMessage( output, reply.toString().getBytes() );
              
          // Get the next command.
          request = new String( getMessage( input ) );
        }
      }
    } catch ( IOException e ) {
      System.out.println( "IO Error: " + e );
    } catch( GeneralSecurityException e ){
      System.err.println( "Encryption error: " + e );
    } finally {
      try {
        // Close the socket on the way out.
        sock.close();
      } catch ( Exception e ) {
      }
    }
  }

  /** Esentially, the main method for our server, as an instance method
      so we can access non-static fields. */
  private void run( String[] args ) {
    ServerSocket serverSocket = null;
    
    // One-time setup.
    try {
      // Read the map and the public keys for all the users.
      readUsers();

      // Open a socket for listening.
      serverSocket = new ServerSocket( PORT_NUMBER );
    } catch( Exception e ){
      System.err.println( "Can't initialize server: " + e );
      System.exit( 1 );
    }
     
    // Keep trying to accept new connections and serve them.
    while( true ){
      try {
        // Try to get a new client connection.
        Socket sock = serverSocket.accept();

        // Handle interaction with the client.
        handleClient( sock );
      } catch( IOException e ){
        System.err.println( "Failure accepting client " + e );
      }
    }
  }

  public static void main( String[] args ) {
    // Make a server object, so we can have non-static fields.
    Server server = new Server();
    server.run( args );
  }
}


